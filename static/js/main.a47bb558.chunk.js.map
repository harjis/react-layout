{"version":3,"sources":["components/Settings/Settings.module.css","components/Rows/Rows.module.css","components/Tabs/Tabs.module.css","App.module.css","components/Tabs/Tabs.tsx","components/Settings/Settings.tsx","components/Rows/Rows.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","Tabs","className","styles","tabs","Settings","React","useState","isShown","setShown","container","header","onClick","state","settings","Rows","numberOrRows","setNumberOfRows","button","inputRows","Array","keys","map","index","key","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"uGACAA,EAAOC,QAAU,CAAC,UAAY,4BAA4B,OAAS,yBAAyB,SAAW,6B,gBCAvGD,EAAOC,QAAU,CAAC,UAAY,wBAAwB,UAAY,0B,kBCAlED,EAAOC,QAAU,CAAC,KAAO,qB,gBCAzBD,EAAOC,QAAU,CAAC,UAAY,yB,yJCSfC,EANF,kBACX,yBAAKC,UAAWC,IAAOC,MACrB,sC,uBCUWC,EAZE,WAAO,IAAD,EACOC,IAAMC,UAAS,GADtB,mBACdC,EADc,KACLC,EADK,KAErB,OACE,yBAAKP,UAAWC,IAAOO,WACrB,yBAAKR,UAAWC,IAAOQ,OAAQC,QAAS,kBAAMH,GAAS,SAAAI,GAAK,OAAKA,OAAjE,yBAGCL,GAAW,yBAAKN,UAAWC,IAAOW,UAAvB,kD,wBCUHC,EAjBF,WAAO,IAAD,EACuBT,IAAMC,SAAS,IADtC,mBACVS,EADU,KACIC,EADJ,KAEjB,OACE,yBAAKf,UAAWC,IAAOO,WACrB,yBAAKR,UAAWC,IAAOe,QACrB,4BAAQN,QAAS,kBAAMK,GAAgB,SAAAJ,GAAK,OAAIA,EAAQ,OAAxD,OADF,UAEUG,GAEV,yBAAKd,UAAWC,IAAOgB,WACpB,YAAIC,MAAMJ,GAAcK,QAAQC,KAAI,SAAAC,GAAK,OACxC,yBAAKC,IAAKD,GAAV,QAAuBA,EAAQ,S,gBCK1BE,EAVO,WACpB,OACE,yBAAKvB,UAAWC,IAAOO,WACrB,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,QCFcgB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDoI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.a47bb558.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Settings_container__1dFSD\",\"header\":\"Settings_header__1XSBB\",\"settings\":\"Settings_settings__3U6ep\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Rows_container__1v_xb\",\"inputRows\":\"Rows_inputRows__OliBW\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"tabs\":\"Tabs_tabs__HvDAh\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__1MQN3\"};","import React from \"react\";\n\nimport styles from \"./Tabs.module.css\";\n\nconst Tabs = () => (\n  <div className={styles.tabs}>\n    <h1>Tabs</h1>\n  </div>\n);\n\nexport default Tabs;\n","import React from \"react\";\n\nimport styles from \"./Settings.module.css\";\n\nconst Settings = () => {\n  const [isShown, setShown] = React.useState(true);\n  return (\n    <div className={styles.container}>\n      <div className={styles.header} onClick={() => setShown(state => !state)}>\n        Click to open / close\n      </div>\n      {isShown && <div className={styles.settings}>Some element that dynamically takes up space</div>}\n    </div>\n  );\n};\n\nexport default Settings;\n","import React from \"react\";\n\nimport styles from \"./Rows.module.css\";\n\nconst Rows = () => {\n  const [numberOrRows, setNumberOfRows] = React.useState(20);\n  return (\n    <div className={styles.container}>\n      <div className={styles.button}>\n        <button onClick={() => setNumberOfRows(state => state + 1)}>Add</button>\n        Items: {numberOrRows}\n      </div>\n      <div className={styles.inputRows}>\n        {[...Array(numberOrRows).keys()].map(index => (\n          <div key={index}>Item {index + 1}</div>\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default Rows;\n","import React from \"react\";\nimport \"normalize.css\";\n\nimport Tabs from \"./components/Tabs\";\nimport Settings from \"./components/Settings\";\nimport Rows from \"./components/Rows\";\n\nimport styles from \"./App.module.css\";\n\nconst App: React.FC = () => {\n  return (\n    <div className={styles.container}>\n      <Tabs />\n      <Settings />\n      <Rows />\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport './index.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}